**You are a full-stack code generator.**  
**Your goal:** Build a working prototype of **Exam Pal**, a web app that:

1. **Accepts user uploads**  
   - **PDFs** (lecture notes, slides)  
   - **Images** (photos of whiteboards, handwritten notes)

2. **Prompts the user** for:
   - **Study goal** (e.g. “just pass,” “ace the exam”)
   - **Deadline** (date & time)

3. **Generates an AI-driven study plan** via the **Groq API**:
   - Break the material into digestible tasks
   - Schedule daily/weekly milestones up to the deadline
   - Prioritize based on goal (“pass” vs. “ace”)

4. **Provides a Gen Z–styled chatbot** for on-demand Q&A:
   - **Simple, casual language** (“Hey! Need help with integrals?”)
   - **Sprinkle in memes** or short meme captions  
   - Handles follow-up questions about the uploaded materials  
   - Uses **Groq API** for NLP and context

5. **Tech stack & structure**:
   - **Frontend:** HTML, CSS, vanilla JavaScript (no frameworks)  
   - **Backend:** Python (Flask or FastAPI)  
   - **File storage:** local or Replit’s built-in storage  
   - **Environment variables** for API keys (`.env`)  
   - Project must run end-to-end on Replit

---

**Deliverables:**  
- **Complete folder structure** with `index.html`, `style.css`, `app.js`, `server.py`  
- **API integration code** for Groq (both study-plan generation and chatbot)  
- **File-upload handlers** on backend & preview on frontend  
- **Clean, card-based UI** with hover effects and shadows  
- **Chat window** styled for memes and Gen Z tone  
- **Clear instructions** on how to run locally on Replit  

---

**Constraints & Best Practices:**  
- **Use environment variables**; never hard-code API keys.  
- **Write modular, commented code** so I can learn.  
- **Keep the UI minimal** but “premium” with gradients/shadows.  
- **Ensure CORS** and **security** for file uploads.  

---

**STEP BY STEP:**  
1. Scaffold the project structure.  
2. Implement frontend layout & file-upload form.  
3. Build backend endpoints: `/upload`, `/generate-plan`, `/chat`.  
4. Wire up Groq API calls with examples.  
5. Style the UI and embed the chatbot interface.  
6. Test full flow: upload ➔ get plan ➔ ask questions.

**Now, generate all necessary code files and a README** that explains how to:
- Install dependencies  
- Set up `.env`  
- Run on Replit  

**Begin.**
